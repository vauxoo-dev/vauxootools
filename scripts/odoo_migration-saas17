#! /usr/bin/env python
"""
Script with a serie of methods and classes to migrate date from differents
versions of Odoo
"""
from itertools import izip_longest
from vauxootools.vauxootools import VauxooToolsServers
from vauxootools.vauxootools import VxConfigServers
from vauxootools.instance import Instance
import re
import time


class ImportJournalEntries(object):
    '''
    Import Journal Entries between differents version of Odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def create_account_move_reconcile(self):
        '''
        Create Reconciles
        '''
        model = 'account.move.reconcile'
        fields = ['id', 'name', 'create_date', 'type']
        move_ids = self.migration.origin.search(model, [], limit=1)
        for i in move_ids:
            for move in self.migration.origin.execute(model, 'export_data',
                                                      [i], fields)['datas']:
                move.insert(2, move[2].split(' ')[0])
                move.pop(3)
                result = self.migration.dest.execute(model, 'load',
                                                     fields, [move])
                if result['messages']:
                    self.migration.loger.error('Error creating the Reconcile '
                                               '%s because %s' % (move[1],
                                                                  result['messages']))
                else:
                    self.migration.loger.info('Created the Reconcile  %s '
                                              '' % (move[1]))
        return True
    def create_account_move(self, period):
        '''
        Create Journal Entries
        '''
        model = 'account.move'
        fields = ['id', 'name', 'journal_id/id', 'ref', 'period_id/id', 'date',
                  'to_check', 'partner_id/id', 'balance', 'narration', 'state']
        move_ids = self.migration.origin.search(model,
                                                [('period_id', '=', period)])
        for i in move_ids:
            for move in self.migration.origin.execute(model, 'export_data',
                                                      [i], fields)['datas']:
                result = self.migration.dest.execute(model, 'load',
                                                     fields, [move])
                if result['messages']:
                    self.migration.loger.error('Error creating the Move %s '
                                               'because %s' % (move[1],
                                                               result['messages']))
                else:
                    self.migration.loger.info('Created the Move  %s '
                                              '' % (move[1]))
        return True

    def create_account_move_line(self, period):
        '''
        Create Journal Entries
        '''
        model = 'account.move.line'
        fields = ['id', 'name', 'journal_id/id', 'ref', 'period_id/id', 'date',
                  'partner_id/id', 'balance', 'narration',
                  'account_id/id', 'amount_currency', 'amount_residual',
                  'amount_residual_currency', 'currency_id/id', 'credit',
                  'debit', 'move_id/id', 'reconcile_id/id',
                  'reconcile_partial_id/id', 'state']
        line_ids = self.migration.origin.search(model,
                                                [('period_id', '=', period)])
        for i in line_ids:
            for line in self.migration.origin.execute(model, 'export_data',
                                                      [i], fields)['datas']:
                if 'Valid' in line:
                    line.insert(line.index('Valid'), 'Balanced')
                    line.remove('Valid')
                result = self.migration.dest.execute(model, 'load',
                                                     fields, [line])
                if result['messages']:
                    self.migration.loger.error('Error creating the line %s '
                                               'because %s' % (line[1],
                                                               result['messages']))
                else:
                    self.migration.loger.info('Created the line  %s '
                                              '' % (line[1]))
        return True

    def main(self):
        '''
        Create the Account Moves and their Lines
        '''
        self.create_account_move_reconcile()
        for i in self.migration.origin.search('account.period', []):
            self.create_account_move(i)
            self.create_account_move_line(i)

        return True
class ImportCurrency(object):
    '''
    Import Currency from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def create_currency(self):
        '''
        Create currencies
        '''
        model = 'res.currency'
        currency_ids = self.migration.origin.\
                                    search(model,
                                           [])
        fields_o = ['id', '.id', 'name', 'rate', 'rounding', 'symbol']
        fields_d = ['id', 'name', 'rate', 'rounding', 'symbol']
        for currency in self.migration.origin.execute(model,
                                                      'export_data',
                                                      currency_ids,
                                                      fields_o)['datas']:
            currency[0] = currency[0] or '__export__.res_currency_' + currency[1]
            del currency[1]
            result = self.migration.dest.execute(model,
                                                 'load',
                                                 fields_d,
                                                 [currency])
            if result['messages']:
                self.migration.loger.error('Error creating the Currency %s '
                                           'because %s' % (currency[1],
                                                           result['messages']))
            else:
                self.migration.loger.info('Created the Currency  %s '
                                          '' % (currency[1]))
        return True


    def create_currency_rate(self):
        '''
        Create currency rate
        '''
        model = 'res.currency.rate'
        currency_ids = self.migration.origin.search(model, [])
        fields_o = ['id', '.id', 'name', 'currency_id/id', 'currency_id.id', 'rate']
        fields_d = ['id', 'name', 'currency_id/id', 'rate']
        for currency in self.migration.origin.execute(model, 'export_data',
                                                      currency_ids,
                                                      fields_o)['datas']:
            currency[0] = currency[0] or '__export__.res_currency_rate_' + currency[1]
            currency[3] = currency[3] or ('__export__.res_currency_' + currency[4] if currency[4] else '')
            del currency[4]
            del currency[1]
            name = time.strftime(currency[1] + ' %H:%M:%S')
            currency.pop(1)
            currency.insert(1, name)
            result = self.migration.dest.execute(model, 'load', fields_d,
                                                 [currency])
            if result['messages']:
                self.migration.loger.error('Error creating the Rate%s '
                                           'because %s' % (currency[1],
                                                           result['messages']))
            else:
                self.migration.loger.info('Created the Rate %s '
                                          '' % (currency[1]))
        return True

    def main(self):
        '''
        Create the currencies for the company
        '''
        self.create_currency()
        self.create_currency_rate()
        return True

class ImportJournalsV6(object):
    '''
    Import journals from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def create_sequence(self):
        '''
        Create the sequence in the destiny instance for the new journal
        '''
        sequence_ids = self.migration.origin.\
                                    search('ir.sequence',
                                           [])
        fields_o = ['id', '.id', 'name', 'prefix', 'suffix', 'padding',
                  'number_increment']
        fields_d = ['id', 'name', 'prefix', 'suffix', 'padding',
                  'number_increment']
        for sequence in self.migration.origin.execute('ir.sequence',
                                                      'export_data',
                                                      sequence_ids,
                                                      fields_o, {'lang': 'es_MX'})['datas']:
            sequence[0] = '__export__.ir_sequence_'+sequence[1]
            del sequence[1]
            result = self.migration.dest.execute('ir.sequence',
                                                 'load',
                                                 fields_d,
                                                 [sequence])
            if result['messages']:
                self.migration.loger.error('Error creating the sequence %s '
                                           'because %s' % (sequence[1],
                                                           result['messages']))
            else:
                self.migration.loger.info('Created the sequence type %s '
                                          '' % (sequence[1]))
        return True

    def create_journal(self):
        '''
        Create the new journal in the destiny instance
        '''

        def before_import(fields, data):
            '''
            Change values that are diferents by v6.1 and saas-17
            '''
            f_type = False
            try:
                f_type = fields.index('type')
                value = data[f_type]
                if value == 'Bank and Checks':
                    data[f_type] = 'Bank'
                elif value == 'Purchase Refund':
                    data[f_type] = 'Purchase'
                elif value == 'Sale Refund':
                    data[f_type] = 'Sale'
                elif value == 'General':
                    data[f_type] = 'Miscellaneous'
            except ValueError:
                f_type = False
            return data

        model = 'account.journal'
        fields_o = ['id', '.id','name', 'code', 'type', 'sequence_id/id', 'sequence_id.id',
                  'default_credit_account_id/id', 'default_credit_account_id.id',
                  'default_debit_account_id/id', 'default_debit_account_id.id']
        fields_d = ['id', 'name', 'code', 'type', 'sequence_id/id',
                  'default_credit_account_id/id',
                  'default_debit_account_id/id']
        journal_ids2 = self.migration.dest.execute(model, 'search', [('code','=','STJ')])
        ir_data = self.migration.dest.execute('ir.model.data', 'search', [('name','=','account_journal_1'),('module','=','__export__')])
        if not ir_data:
            self.migration.dest.execute('ir.model.data','create',{'model':'account.journal', 'name': 'account_journal_1', 'module': '__export__', 'res_id': journal_ids2[0]})
        journal2 = self.migration.dest.execute(model, 'export_data',
                                                     journal_ids2,
                                                     fields_d)['datas']
        journal_ids = self.migration.origin.search(model, [])
        no_create = {}
        for journal in self.migration.origin.execute(model, 'export_data',
                                                     journal_ids,
                                                     fields_o, {'lang': 'es_MX'})['datas']:
            if 'Bank and Cheques' in journal:
                journal.insert(journal.index('Bank and Cheques'),
                               'Bank and Checks')
                journal.remove('Bank and Cheques')
            journal[0] = journal[0] or '__export__.account_journal_'+journal[1]
            journal[5] = ('__export__.ir_sequence_' + journal[6] if journal[6] else '')
            journal[7] = journal[7] or ('__export__.account_account_' + journal[8] if journal[8] else '')
            journal[9] = journal[9] or ('__export__.account_account_' + journal[10] if journal[10] else '')
            del journal[10]
            del journal[8]
            del journal[6]
            del journal[1]
            self.migration.loger.info('id %s',(journal[0]))
            if journal[2] == 'STJ':
                journal[0] = '__export__.account_journal_1'
            result = self.migration.dest.execute(model, 'load', fields_d,
                                                 [before_import(fields_d, journal)])
            if journal[0] in no_create.keys():
                self.migration.dest.execute(model, 'load', fields_d,
                                            [no_create[journal[0]]])
                self.migration.loger.info('Created the child of %s'
                                          '' % journal[1])
            if result['messages']:
                self.migration.loger.error('Error creating the journal %s '
                                           'because %s' % (journal[1],
                                                           result['messages']))
                if 'external id' in result['messages']:
                    id_xml = result['messages'].split("'")
                    id_xml = id_xml and id_xml[1]
                    no_create.update({id_xml: journal})
            else:
                self.migration.loger.info('Created the journal type %s '
                                          '' % (journal[1]))
        return True

    def main(self):
        '''
        Prepare the ids of the new records to create
        '''
        self.create_sequence()
        self.create_journal()




class ImportProductV6(object):
    '''
    Import Product from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_category(self):
        '''
        Import the Product Category by import_data method way
        '''
        legacy = self.migration.origin
        destiny = self.migration.dest
        model = 'product.category'
        fields_o = ['id','.id', 'name', 'type', 'parent_id/id', 'parent_id.id',
                  'property_account_expense_categ/id', 'property_account_expense_categ.id',
                  'property_account_income_categ/id', 'property_account_income_categ.id',
                  'property_stock_account_input_categ/id', 'property_stock_account_input_categ.id',
                  'property_stock_account_output_categ/id', 'property_stock_account_output_categ.id',
                  'property_stock_variation/id', 'property_stock_variation.id',
                  'property_stock_journal/id', 'property_stock_journal.id']
        fields_d = ['id', 'name', 'type', 'parent_id/id',
                  'property_account_expense_categ_id/id',
                  'property_account_income_categ_id/id',
                  'property_stock_account_input_categ_id/id',
                  'property_stock_account_output_categ_id/id',
                  'property_stock_valuation_account_id/id',
                  'property_stock_journal/id']
        category_ids = legacy.search(model, [], 0, None, "id ASC")
        self.migration.loger.info( 'Parents_update_value %s ' % (fields_o))
        datas = legacy.execute(model, 'export_data', category_ids, fields_o, {'lang': 'es_MX'})
        datas = izip_longest(*[iter(datas.get('datas'))]*1, fillvalue=[])
        pfields = ['id', 'parent_id/id']
        parents_update = []
        for data in datas:
            vals  = [] in data and data[:data.index([])] or data
            vals[0][0] = vals[0][0] or '__export__.product_category_' + vals[0][1]
            vals[0][6] = vals[0][6] or ('__export__.account_account_' + vals[0][7] if vals[0][7] else '')
            vals[0][8] = vals[0][8] or ('__export__.account_account_' + vals[0][9] if vals[0][9] else '')
            vals[0][10] = vals[0][10] or ('__export__.account_account_' + vals[0][11] if vals[0][11] else '')
            vals[0][12] = vals[0][12] or ('__export__.account_account_' + vals[0][13] if vals[0][13] else '')
            vals[0][14] = vals[0][14] or ('__export__.account_account_' + vals[0][15] if vals[0][15] else '')
            vals[0][16] = vals[0][16] or ('__export__.account_journal_' + vals[0][17] if vals[0][17] else '')
            if vals[0][16] == 'stock.stock_journal':
                vals[0][16] = '__export__.account_journal_1'
            if vals[0][0] == 'product.cat0':
                vals[0][0] = '__export__.product_category_1'
            del vals[0][17]
            del vals[0][15]
            del vals[0][13]
            del vals[0][11]
            del vals[0][9]
            del vals[0][7]
            del vals[0][1]
            #self.migration.loger.info( 'Categories %s ' % (vals[0][3]))
            for val in vals:
                val[3] = val[3] or ('__export__.product_category_' + val[4] if val[4] else '')
                del val[4]
                parents_update.append((val[0], val[3]))
                val[3] = ''

            result = destiny.execute(model, 'load', fields_d, vals)
            self.migration.loger.info( 'Created Categories %s ' % (vals[0][1]))
        self.migration.loger.info( 'Parents_update_value %s ' % (parents_update))

        result = destiny.execute(model, 'load', pfields, parents_update)
        self.migration.loger.info( 'Updating Parents %s ' % (datas))
        return True

    def import_product(self):
        '''
        Import the Product by import_data method way
        '''
        model = 'product.product'
        fields_o = ['id', '.id', 'name', 'type', 'default_code', 'list_price',
                  'standard_price', 'active', 'description_sale',
                  'categ_id/id', 'categ_id.id', 'uom_id/id', 'uom_id.id', 'uom_po_id/id', 'uom_po_id.id']
        fields_d = ['id', 'name', 'type', 'default_code', 'list_price',
                  'standard_price', 'active', 'description_sale',
                  'categ_id/id', 'uom_id/id', 'uom_po_id/id']
        product_ids = self.migration.origin.search(model, [])
        no_create = {}
        for product in self.migration.origin.execute('product.product',
                                                     'export_data',
                                                     product_ids,
                                                     fields_o, {'lang': 'es_MX'})['datas']:
            product[0] = product[0] or '__export__.product_product_' + product[1]
            del product[1]
            product[8] = product[8] or ('__export__.product_category_' + product[9] if product[9] else '')
            if product[8] == 'product.cat0':
                product[8] = '__export__.product_category_1'
            product[10] = product[10] or ('__export__.product_uom_' + product[11] if product[11] else '')
            product[12] = product[12] or ('__export__.product_uom_' + product[13] if product[13] else '')
            del product[13]
            del product[11]
            del product[9]
            result = self.migration.dest.execute(model, 'load',
                                                 fields_d, [product])
            if product[0] in no_create.keys():
                self.migration.dest.execute(model, 'load',
                                            fields_d, no_create.get(product[0]))
                self.migration.loger.info('Created the child of %s'
                                          '' % product[1])
            if result['messages']:
                self.migration.loger.error('Error creating the product %s '
                                           'because %s' % (product[1],
                                                           result['messages']))
                if 'external id' in result['messages']:
                    id_xml = result['messages'].split("'")
                    id_xml = id_xml and id_xml[1]
                    if id_xml in no_create:
                        no_create[id_xml].append(product)
                    else:
                        no_create.update({id_xml: [product]})
            else:
                self.migration.loger.info('Created the product type %s '
                                          'with id %s ' % (product[1], product[0]))
        return True

    def import_product_uom(self):
        '''
        Import the Product by import_data method way
        '''
        model = 'product.uom'
        fields_o = ['id', '.id', 'name', 'uom_type', 'factor', 'factor_inv',
                  'rounding', 'category_id/id']
        fields_d = ['id', 'name', 'uom_type', 'factor', 'factor_inv',
                  'rounding', 'category_id/id']
        product_ids = self.migration.origin.search(model, [])
        no_create = {}
        for product in self.migration.origin.execute(model,
                                                     'export_data',
                                                     product_ids,
                                                     fields_o, {'lang': 'es_MX'})['datas']:
            product[0] = product[0] or '__export__.product_uom_' + product[1]
            del product[1]
            product[2] = product[2].replace('UoM', 'Unit of Measure')
            result = self.migration.dest.execute(model, 'load',
                                                 fields_d, [product])
            if result['messages']:
                self.migration.loger.error('Error creating the product UOM %s '
                                           'because %s' % (product[1],
                                                           result['messages']))
            else:
                self.migration.loger.info('Created the UOM  %s '
                                          '' % (product[1]))
        return True

    def main(self):
        '''
        Call methods to create categories and products
        '''
        self.import_product_uom()
        self.import_category()
        self.import_product()

class ImportListPriceV6(object):
    '''
    Import List Price from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_price_list(self):
        '''
        Import the price_list by import_data method way
        '''
        model = 'product.pricelist'
        fields_o = ['id', '.id', 'name']
        fields_d = ['id', 'name']
        pricelist_ids = self.migration.origin.search(model, [])
        for pricelist in self.migration.origin.execute(model,
                                                       'export_data',
                                                       pricelist_ids, fields_o, {'lang': 'es_MX'}
                                                      )['datas']:
            pricelist[0] = pricelist[0] or '__export__.product_pricelist_' + pricelist[1]
            del pricelist[1]
            result = self.migration.dest.execute(model,
                                                 'load',
                                                 fields_d,
                                                 [pricelist])
            if result['messages']:
                self.migration.loger.error('Error creating the PriceList %s '
                                           'because %s' % (pricelist[1],
                                                           result['messages']))
            else:
                self.migration.loger.info('Created the PriceList %s '
                                          '' % (pricelist[1]))
        return True

    def import_price_list_items(self):
        '''
        Import the price_list_items by import_data method way
        '''

        def before_import(fields, data):
            '''
            Change values that are diferents by v6.1 and saas-17
            '''
            f_base = False
            try:
                f_base = fields.index('base')
                value = data[f_base]
                if value == '1':
                    data[f_base] = 'Public Price'
                elif value == '2':
                    data[f_base] = 'Cost'
                elif value == '3':
                    data[f_base] = 'Other Pricelist'
            except ValueError:
                f_base = False
            return data

        model = 'product.pricelist.item'
        model2 = 'product.pricelist.version'
        fields_o = ['id', '.id', 'name',
                    'base_pricelist_id/id', 'base_pricelist_id.id',
                    'min_quantity', 'base', 'price_discount', 'product_id/id', 'product_id.id',
                    'price_max_margin', 'price_min_margin', 'price_round',
                    'categ_id/id', 'categ_id.id', 'price_version_id.id', 'price_cot', 'price_surcharge']
        fields_d = ['id', 'name', 'base_pricelist_id/id',
                    'min_quantity', 'base', 'price_discount', 'product_id/id',
                    'price_max_margin', 'price_min_margin', 'price_round',
                    'categ_id/id', 'price', 'price_surcharge', 'pricelist_id/id','compute_price']
        fields_v = ['pricelist_id/id', 'pricelist_id.id']
        
        for pricelist_ids in self.migration.origin.search(model, []):
            pricelist = self.migration.origin.execute(model, 'export_data',
                                                       [pricelist_ids], fields_o, {'lang': 'es_MX'}
                                                      )['datas'][0]
            price_v_ids = self.migration.origin.search(model2, [('id','=',pricelist[15])], limit=1)
            pricelist += self.migration.origin.execute(model2, 'export_data',
                                                       price_v_ids, fields_v)['datas'][0]
            pricelist[0] = pricelist[0] or '__export__.product_pricelist_item_'+pricelist[1]
            pricelist[3] = pricelist[3] or ('__export__.product_pricelist_' + pricelist[4] if pricelist[4] else '')
            pricelist[8] = pricelist[8] or ('__export__.product_product_' + pricelist[9] if pricelist[9] else '')
            pricelist[13] = pricelist[13] or ('__export__.product_category_' + pricelist[14] if pricelist[14] else '')
            pricelist[18] = pricelist[18] or ('__export__.product_pricelist_' + pricelist[19] if pricelist[19] else '')
            del pricelist[19]
            del pricelist[15]
            del pricelist[14]
            del pricelist[9]
            del pricelist[4]
            del pricelist[1]
            pricelist += ['Formula']
            result = self.migration.dest.execute(model, 'load', fields_d,
                                                 [before_import(fields_d, pricelist)])
            if result['messages']:
                self.migration.loger.error('Error creating the Item %s '
                                           'because %s' % (pricelist[1],
                                                           result['messages']))
            else:
                self.migration.loger.info('Created the Items %s '
                                          '' % (pricelist[1]))
        return True

    def main(self):
        '''
        Create Journals and all record related with the journals
        '''
        self.import_price_list()
        self.import_price_list_items()


class ImportPaymentTerm(object):
    '''
    Import Payment Terms
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_payment_terms(self):
        '''
        Import Payment Terms
        '''
        model = 'account.payment.term'
        fields_o = ['id', '.id', 'name', 'note']
        fields_d = ['id', 'name', 'note']
        account_ids = self.migration.origin.search(model, [])
        for account in self.migration.origin.execute(model, 'export_data',
                                                     account_ids,
                                                     fields_o, {'lang': 'es_MX'})['datas']:
            account[0] = account[0] or '__export__.account_payment_term_'+account[1]
            del account[1]
            result = self.migration.dest.execute(model, 'load', fields_d,
                                                 [account])
            if result['messages']:
                self.migration.loger.error('Error creating the Term %s '
                                           'because %s' % (account[1],
                                                           result['messages']))
            else:
                self.migration.loger.info('Created the Term %s '
                                          '' % (account[1]))
        return True

    def import_payment_term_line(self):
        '''
        Import Payment Terms Line
        '''
        model = 'account.payment.term.line'
        fields_o = ['id', '.id', 'days', 'payment_id/id', 'payment_id.id', 'value_amount',
                  'value']
        fields_d = ['id', 'days', 'payment_id/id', 'value_amount',
                  'value']
        account_ids = self.migration.origin.search(model, [])
        for account in self.migration.origin.execute(model, 'export_data',
                                                     account_ids,
                                                     fields_o, {'lang': 'es_MX'})['datas']:
            account[0] = account[0] or '__export__.account_payment_term_line_'+account[1]
            account[3] = account[3] or ('__export__.account_payment_term_' + account[4] if account[4] else '')
            del account[4]
            del account[1]
            result = self.migration.dest.execute(model, 'load', fields_d,
                                                 [account])
            if result['messages']:
                self.migration.loger.error('Error creating the Term Line %s '
                                           'because %s' % (account[1],
                                                           result['messages']))
            else:
                self.migration.loger.info('Created the Term Line%s '
                                          '' % (account[1]))
        return True


    def main(self):
        '''
        Create the payments tems
        '''
        self.import_payment_terms()
        self.import_payment_term_line()
        return True


def importusers(migration):
    '''
    Import Users from verion 6 of odoo
    '''

    model = 'res.users'
    fields_o = ['id', '.id', 'name', 'login', 'password', 'active']
    fields_d = ['id', 'name', 'login', 'password', 'active']

    for users in migration.origin.search(model, []):

        users_list = migration.origin.execute(model, 'export_data',
                                              [users],
                                              fields_o)['datas']

        users_list[0][0] = users_list[0][0] or '__export__.res_users_'+users_list[0][1]
        del users_list[0][1]
        result = migration.dest.execute(model, 'load', fields_d, users_list)
        if result['messages']:
            migration.loger.error('Error creating the user %s '
                                  'because %s' % (users_list[0][1], result['messages']))
        else:
            migration.loger.info('Created the user  %s '
                                 '' % (users_list[0][1]))
    return True

def importpartnersv6(migration):
    '''
    Import Partners from verion 6 of odoo
    '''
    def before_import(fields, data):
        '''
        Change values that are diferents by v6.1 and saas-17
        '''
        p_type = False
        try:
            p_type = fields.index('type')
            value = data[p_type]
            if value in ('Default', 'Other'):
                data[p_type] = 'Other address'
            elif value == 'Invoice':
                data[p_type] = 'Invoice address'
            elif value == 'Delivery':
                data[p_type] = 'Shipping address'
        except ValueError:
            p_type = False
        return data

    model = 'res.partner'
    model2 = 'res.partner.address'
    fields_p = ['id', '.id', 'name', 'credit', 'vat',
                'credit_limit', 'debit', 'debit_limit', 'email', 'mobile',
                'phone', 'customer', 'supplier',
                'property_account_payable/id', 'property_account_payable.id',
                'property_account_receivable/id', 'property_account_receivable.id',
                'property_payment_term/id', 'property_payment_term.id',
                'property_product_pricelist/id', 'property_product_pricelist/id', 'comment']
    fields_p_d = ['id', 'name', 'credit', 'vat',
                'credit_limit', 'debit', 'debit_limit', 'email', 'mobile',
                'phone', 'customer', 'supplier',
                'property_account_payable_id/id',
                'property_account_receivable_id/id',
                'property_payment_term_id/id',
                'property_product_pricelist/id', 'comment']
    fields_a = ['city', 'type', 'street', 'street2', 'street3', 'street4',
                'zip', 'country_id/id', 'fax', 'state_id/id']
    fields_a_d = ['city', 'type', 'street_name', 'street2', 'street_number', 'street_number2',
                'zip', 'country_id/id', 'state_id/id']
    fields_c = ['id', '.id', 'name', 'mobile', 'street', 'street2',
                'country_id/id', 'country_id.id' 'type', 'partner_id/id', 'partner_id.id', 'zip', 'city']
    fields_c8 = ['id', 'name', 'mobile', 'street', 'street2',
                'country_id/id', 'type', 'parent_id/id', 'zip', 'city']

    for partner in migration.origin.search(model, []):
        partner_list = migration.origin.execute(
            model, 'export_data', [partner], fields_p)['datas'][0]
        contact = migration.origin.search(
            model2, [
                ('partner_id', '=', partner),
                ('type', '=', 'invoice')], limit=1)
        partner_list[0] = partner_list[0] or '__export__.res_partner_'+partner_list[1]
        partner_list[13] = partner_list[13] or ('__export__.account_account_' + partner_list[14] if partner_list[14] else '')
        partner_list[15] = partner_list[15] or ('__export__.account_account_' + partner_list[16] if partner_list[16] else '')
        partner_list[17] = partner_list[17] or ('__export__.account_payment_term_' + partner_list[18] if partner_list[18] else '')
        partner_list[19] = partner_list[19] or ('__export__.product_pricelist_' + partner_list[20] if partner_list[20] else '')
        del partner_list[20]
        del partner_list[18]
        del partner_list[16]
        del partner_list[14]
        del partner_list[1]
        fields = False
        if contact:
            partner_list += migration.origin.execute(
                model2, 'export_data', contact, fields_a)['datas'][0]
            fields = fields_p_d+fields_a_d
            if partner_list[26]:
                partner_list[26] = partner_list[26].replace('l10n_mx_states.res_country_','base.') or ''
                if partner_list[26] == 'base.state_mx_talx':
                    partner_list[26] = partner_list[26].replace('talx','tlax')
                elif partner_list[26] == 'base.state_mx_qr':
                    partner_list[26] = partner_list[26].replace('qr','q roo')
            partner_list[9] = partner_list[9] or partner_list[25] or ''
            del partner_list[25]
        else:
            contact = migration.origin.search(
                model2, [('partner_id', '=', partner)], limit=1)
            if contact:
                partner_list += migration.origin.execute(
                    model2, 'export_data', contact, fields_a)['datas'][0]
                fields = fields_p_d + fields_a_d
                if partner_list[26]:
                    partner_list[26] = partner_list[26].replace('l10n_mx_states.res_country_','base.') or ''
                    if partner_list[26] == 'base.state_mx_talx':
                        partner_list[26] = partner_list[26].replace('talx','tlax')
                    elif partner_list[26] == 'base.state_mx_qr':
                        partner_list[26] = partner_list[26].replace('qr','q roo')
                partner_list[9] = partner_list[9] or partner_list[25] or ''
                del partner_list[25]
        fields_company = list(fields or fields_p_d)
        fields_company.append('company_type')
        partner_list.append('company')
        result = migration.dest.execute(
            model, 'load', fields_company,
            [before_import(fields_company, partner_list)])
        if result['messages']:
            migration.loger.error('Error creating the type %s '
                                  'because %s' % (
                                  partner_list[1], result['messages']))
        else:
            migration.loger.info('Created the partner  %s '
                                 '' % (partner_list[1]))
        contact = contact and migration.origin. search(
            model2, [
                ('partner_id', '=', partner),
                ('id', '!=', contact[0])])
        for con in contact and migration.origin.execute(
                model2, 'export_data', contact, fields_c)['datas']:
            con[0] = con[0] or '__export__.res_partner_address_'+con[1]
            del con[1]
            if con[1] == False:
                con.pop(1)
                con.insert(1, partner_list[1])
            result = migration.dest.execute(model, 'load', fields_c8,
                                            [before_import(fields_c8, con)])
            if result['messages'][0]:
                migration.loger.error('Error creating the Contac %s '
                                      'because %s' % (
                                      con[1], result['messages']))
            else:
                migration.loger.info('Created the Contact  %s ' % (con[1]))
    return True

                

class ImportAccountsV6(object):
    '''
    Import list from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_account_type(self):
        '''
        Import the account type by import_data method way
        '''
        model = 'account.account.type'
        fields_o = ['id', '.id', 'name', 'report_type']
        fields_d = ['id', 'name', 'type']
        account_ids = self.migration.origin.search(model, [])
        for account in self.migration.origin.execute(model, 'export_data',
                                                     account_ids,
                                                     fields_o)['datas']:
            account[0] = account[0] or '__export__.account_account_type_'+account[1]
            del account[1]
            if '/' in account:
                account.insert(account.index('/'), 'Regular')
                account.remove('/')
            result = self.migration.dest.execute(model, 'load', fields_d,
                                                 [account])
            if result['messages']:
                self.migration.loger.error('Error creating the type %s '
                                           'because %s' % (account[1],
                                                           result['messages']))
            else:
                self.migration.loger.info('Created the account type %s '
                                          '' % (account[1]))
        return True

    def main(self):
        '''
        Search the records to create in the new instance
        '''
        company_ids = self.migration.origin.search('res.company', [])
        company_id = company_ids and company_ids[0]
        company_dest = self.migration.dest.execute('res.company', 'search',
                                                  [])
        model = 'account.account'
        fields_o = ['id', '.id', 'name', 'code', 'company_id/id', 'company_id.id', 'user_type/id', 'user_type.id']
        fields_d = ['id', 'name', 'code', 'company_id/id', 'user_type_id/id']
        if company_id and company_dest:
            self.import_account_type()
            company_dest = self.migration.dest.execute('res.company', 'browse',
                                                      company_dest[0])
            account_ids = self.migration.origin.search(model, [])
            no_create = {}
            for account in self.migration.origin.execute(model,
                                                         'export_data',
                                                         account_ids,
                                                         fields_o)['datas']:
                account[0] = account[0] or '__export__.account_account_'+account[1]
                account[4] = account[4] or ('__export__.res_company_' + account[5] if account[5] else '')
                account[6] = account[6] or ('__export__.account_account_type_' + account[7] if account[7] else '')
                del account[7]
                del account[5]
                del account[1]
                result = self.migration.dest.execute(model, 'load',
                                                     fields_d, [account])
                if account[0] in no_create.keys():
                    self.migration.dest.execute(model, 'load', fields_d,
                                                no_create.get(account[0]))
                    self.migration.loger.info('Created the child of %s'
                                              '' % account[1])
                if result['messages']:
                    self.migration.loger.error('Error creating the account %s '
                                               'because %s' % (account[1],
                                                               result['messages']))
                    if 'external id' in result['messages']:
                        id_xml = result['messages'].split("'")
                        id_xml = id_xml and id_xml[1]
                        if id_xml in no_create:
                            no_create[id_xml].append(account)
                        no_create.update({id_xml: [account]})
                else:
                    self.migration.loger.info('Created the account %s '
                                              '' % (account[1]))



class MigrationTools(object):
    '''
    Conections object to get records to migrate
    '''

    def __init__(self):
        '''
        Objects of origin and destiny
        '''
        self.origin = False
        self.dest = False
        self.loger = False

    @staticmethod
    def get_id(xml_id):
        '''
        Extract the id from xml_id
        @param xml_id: String with the xml_id of a record
        '''
        id_record = re.findall(r'\d+', xml_id)
        if id_record:
            return int(id_record[0])
        return 0

    def main(self, configuration):
        '''
        Get variables of the configuration object
        '''
        hostname = configuration.get_hostname()
        dbname = configuration.get_db()
        port = configuration.get_port()
        user = configuration.get_user()
        pwd = configuration.get_pwd()
        shost = configuration.get_shostname()
        sdb = configuration.get_sdb()
        sport = configuration.get_sport()
        suser = configuration.get_suser()
        spwd = configuration.get_spwd()
        origin = Instance(dbname=dbname, hostname=hostname, port=int(port),
                          passwd=pwd, username=user,
                          logger=configuration.logger)
        self.origin = origin.server_login()
        dest = Instance(dbname=sdb, hostname=shost, port=int(sport),
                        passwd=spwd, username=suser,
                        logger=configuration.logger)
        self.dest = dest.server_login()
        self.loger = configuration.logger
        return True



if __name__ == '__main__':

    CONFIGURATION = VauxooToolsServers(app_name='migrate_instances',
                                       usage_message="Created by VauxooTools",
                                       options=['dbname', 'hostname',
                                                'password', 'port', 'sd',
                                                'sh', 'spo', 'sp', 'su',
                                                'username'],
                                       log=True, vx_instance=VxConfigServers)

    CI = MigrationTools()
    CI.main(CONFIGURATION)
  #  OBJ = ImportCurrency(CI)
  #  OBJ.main()
    OBJ = ImportAccountsV6(CI)
    OBJ.main()
    OBJ = ImportJournalsV6(CI)
    OBJ.main()
    OBJ = ImportProductV6(CI)
    OBJ.main()
    OBJ = ImportListPriceV6(CI)
    OBJ.main()
    OBJ = ImportPaymentTerm(CI)
    OBJ.main()
    importpartnersv6(CI)
    importusers(CI)
