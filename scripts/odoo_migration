#! /usr/bin/env python
"""
Script with a serie of methods and classes to migrate date from different
versions of Odoo
"""
from vauxootools.vauxootools import VauxooToolsServers
from vauxootools.vauxootools import VxConfigServers
from vauxootools.instance import Instance
import re
import time


class ImportJournalEntries(object):
    '''
    Import Journal Entries between differents version of Odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def create_account_move_reconcile(self):
        '''
        Create Reconciles
        '''
        model = 'account.move.reconcile'
        fields = ['id', 'name', 'create_date', 'type', '.id']
        move_ids = self.migration.origin.search(model, [], limit=1)
        for i in move_ids:
            for move in self.migration.origin.execute(model, 'export_data',
                                                      [i], fields)['datas']:
                move.insert(2, move[2].split(' ')[0])
                move.pop(3)
                if not move[0]:
                    new_id = '__export__.{movel},{ids}'.format(movel=model.replace('.', '_'), ids=move[-1])
                    move.pop(0)
                    move.insert(0, new_id)
                move.pop(-1)
                result = self.migration.dest.execute(model, 'import_data',
                                                     fields, [move])
                if result[2]:
                    self.migration.loger.error('Error creating the Reconcile '
                                               '%s because %s' % (move[1],
                                                                  result[2]))
                else:
                    self.migration.loger.info('Created the Reconcile  %s '
                                              '' % (move[1]))
        return True

    def create_account_move(self, period):
        '''
        Create Journal Entries
        '''
        model = 'account.move'
        fields = ['id', 'name', 'journal_id/id', 'ref', 'period_id/id', 'date',
                  'to_check', 'partner_id/id', 'balance', 'narration', 'state',
                  '.id']
        move_ids = self.migration.origin.search(model,
                                                [('period_id', '=', period)])
        for i in move_ids:
            for move in self.migration.origin.execute(model, 'export_data',
                                                      [i], fields)['datas']:
                if not move[0]:
                    new_id = '__export__.{movel},{ids}'.format(movel=model.replace('.', '_'), ids=move[-1])
                    move.pop(0)
                    move.insert(0, new_id)
                move.pop(-1)
                result = self.migration.dest.execute(model, 'import_data',
                                                     fields, [move])
                if result[2]:
                    self.migration.loger.error('Error creating the Move %s '
                                               'because %s' % (move[1],
                                                               result[2]))
                else:
                    self.migration.loger.info('Created the Move  %s '
                                              '' % (move[1]))
        return True

    def create_account_move_line(self, period):
        '''
        Create Journal Entries
        '''
        model = 'account.move.line'
        fields = ['id', 'name', 'journal_id/id', 'ref', 'period_id/id', 'date',
                  'partner_id/id', 'balance', 'narration',
                  'account_id/id', 'amount_currency', 'amount_residual',
                  'amount_residual_currency', 'currency_id/id', 'credit',
                  'debit', 'move_id/id', 'reconcile_id/id',
                  'reconcile_partial_id/id', 'state', '.id']
        line_ids = self.migration.origin.search(model,
                                                [('period_id', '=', period)])
        for i in line_ids:
            for line in self.migration.origin.execute(model, 'export_data',
                                                      [i], fields)['datas']:
                if 'Valid' in line:
                    line.insert(line.index('Valid'), 'Balanced')
                    line.remove('Valid')
                if not line[0]:
                    new_id = '__export__.{linel},{ids}'.format(linel=model.replace('.', '_'), ids=line[-1])
                    line.pop(0)
                    line.insert(0, new_id)
                line.pop(-1)
                result = self.migration.dest.execute(model, 'import_data',
                                                     fields, [line])
                if result[2]:
                    self.migration.loger.error('Error creating the line %s '
                                               'because %s' % (line[1],
                                                               result[2]))
                else:
                    self.migration.loger.info('Created the line  %s '
                                              '' % (line[1]))
        return True

    def main(self):
        '''
        Create the Account Moves and their Lines
        '''
        self.create_account_move_reconcile()
        for i in self.migration.origin.search('account.period', []):
            self.create_account_move(i)
            self.create_account_move_line(i)

        return True
class ImportCurrency(object):
    '''
    Import Currency from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def create_currency(self):
        '''
        Create currencies
        '''
        model = 'res.currency'
        currency_ids = self.migration.origin.\
            search(model, [])
        fields = ['id', 'name', 'rate', 'rounding', 'symbol', 'accuracy',
                  'base', '.id']
        for currency in self.migration.origin.execute(model,
                                                      'export_data',
                                                      currency_ids,
                                                      fields)['datas']:
            if not currency[0]:
                new_id = '__export__.{currencyl},{ids}'.format(currencyl=model.replace('.', '_'), ids=currency[-1])
                currency.pop(0)
                currency.insert(0, new_id)
            currency.pop(-1)
            result = self.migration.dest.execute(model,
                                                 'import_data',
                                                 fields,
                                                 [currency])
            if result[2]:
                self.migration.loger.error('Error creating the Currency %s '
                                           'because %s' % (currency[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the Currency  %s '
                                          '' % (currency[1]))
        return True


    def create_currency_rate(self):
        '''
        Create currency rate
        '''
        model = 'res.currency.rate'
        currency_ids = self.migration.origin.search(model, [])
        fields = ['id', 'name', 'currency_id/id', 'rate', '.id']
        for currency in self.migration.origin.execute(model, 'export_data',
                                                      currency_ids,
                                                      fields)['datas']:
            name = time.strftime(currency[1] + ' %H:%M:%S')
            currency.pop(1)
            currency.insert(1, name)
            if not currency[0]:
                new_id = '__export__.{currencyl},{ids}'.format(currencyl=model.replace('.', '_'), ids=currency[-1])
                currency.pop(0)
                currency.insert(0, new_id)
            currency.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [currency])
            if result[2]:
                self.migration.loger.error('Error creating the Rate%s '
                                           'because %s' % (currency[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the Rate %s '
                                          '' % (currency[1]))
        return True

    def main(self):
        '''
        Create the currencies for the company
        '''
        self.create_currency()
        self.create_currency_rate()
        return True

class ImportJournalsV6(object):
    '''
    Import journals from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def create_sequence(self):
        '''
        Create the sequence in the destiny instance for the new journal
        '''
        model = 'ir.sequence'
        sequence_ids = self.migration.origin.\
            search(model, [])
        fields = ['id', 'name', 'prefix', 'suffix', 'padding',
                  'number_increment', '.id']
        for sequence in self.migration.origin.execute('ir.sequence',
                                                      'export_data',
                                                      sequence_ids,
                                                      fields)['datas']:
            if not sequence[0]:
                new_id = '__export__.{sequencel},{ids}'.format(sequencel=model.replace('.', '_'), ids=sequence[-1])
                sequence.pop(0)
                sequence.insert(0, new_id)
            sequence.pop(-1)
            result = self.migration.dest.execute(model,
                                                 'import_data',
                                                 fields,
                                                 [sequence])
            if result[2]:
                self.migration.loger.error('Error creating the sequence %s '
                                           'because %s' % (sequence[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the sequence type %s '
                                          '' % (sequence[1]))
        return True


    def create_analytic(self):
        '''
        Import the Analytic Journal by import_data method way
        '''
        fields = ['id', 'name', 'code', 'type', '.id']
        model = 'account.analytic.journal'
        analytic_ids = self.migration.origin.search(model, [])
        for analytic in self.migration.origin.execute(model, 'export_data',
                                                      analytic_ids,
                                                      fields)['datas']:
            if not analytic[0]:
                new_id = '__export__.{analyticl},{ids}'.format(analyticl=model.replace('.', '_'), ids=analytic[-1])
                analytic.pop(0)
                analytic.insert(0, new_id)
            analytic.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [analytic])
            if result[2]:
                self.migration.loger.error('Error creating the analytic %s '
                                           'because %s' % (analytic[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the analytic type %s '
                                          '' % (analytic[1]))
        return True


    def create_journal(self):
        '''
        Create the new journal in the destiny instance
        '''
        model = 'account.journal'
        fields = ['id', 'name', 'code', 'type', 'analytic_journal_id/id',
                  'sequence_id', 'default_credit_account_id/id',
                  'default_debit_account_id/id', '.id']
        journal_ids = self.migration.origin.search(model, [])
        no_create = {}
        for journal in self.migration.origin.execute(model, 'export_data',
                                                     journal_ids,
                                                     fields)['datas']:
            if 'Bank and Cheques' in journal:
                journal.insert(journal.index('Bank and Cheques'),
                               'Bank and Checks')
                journal.remove('Bank and Cheques')

            if not journal[0]:
                new_id = '__export__.{journall},{ids}'.format(journall=model.replace('.', '_'), ids=journal[-1])
                journal.pop(0)
                journal.insert(0, new_id)
            journal.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [journal])
            if journal[0] in no_create.keys():
                self.migration.dest.execute(model, 'import_data', fields,
                                            [no_create[journal[0]]])
                self.migration.loger.info('Created the child of %s'
                                          '' % journal[1])
            if result[2]:
                self.migration.loger.error('Error creating the journal %s '
                                           'because %s' % (journal[1],
                                                           result[2]))
                if 'external id' in result[2]:
                    id_xml = result[2].split("'")
                    id_xml = id_xml and id_xml[1]
                    no_create.update({id_xml: journal})
            else:
                self.migration.loger.info('Created the journal type %s '
                                          '' % (journal[1]))
        return True

    def main(self):
        '''
        Prepare the ids of the new records to create
        '''
        self.create_sequence()
        self.create_analytic()
        self.create_journal()




class ImportProductV6(object):
    '''
    Import Product from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_category(self):
        '''
        Import the Product Category by import_data method way
        '''
        model = 'product.category'
        fields = ['id', 'name', 'type', 'parent_id/id',
                  'property_account_expense_categ/id',
                  'property_account_income_categ/id',
                  'property_stock_account_input_categ/id',
                  'property_stock_account_output_categ/id',
                  'property_stock_journal/id', '.id']
        category_ids = self.migration.origin.search(model, [])
        no_create = {}
        for category in self.migration.origin.execute(model, 'export_data',
                                                      category_ids, fields
                                                     )['datas']:
            if not category[0]:
                new_id = '__export__.{categoryl},{ids}'.format(categoryl=model.replace('.', '_'), ids=category[-1])
                category.pop(0)
                category.insert(0, new_id)
            category.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [category])
            if category[0] in no_create:
                self.migration.dest.execute(model, 'import_data', fields,
                                            no_create.get(category[0]))
                self.migration.loger.info('Created the child of %s'
                                          '' % category[1])
            if result[2]:
                self.migration.loger.error('Error creating the Category %s '
                                           'because %s' % (category[1],
                                                           result[2]))
                if 'external id' in result[2]:
                    id_xml = result[2].split("'")
                    id_xml = id_xml and id_xml[1]
                    if id_xml in no_create:
                        no_create[id_xml].append(category)
                    else:
                        no_create.update({id_xml: [category]})
            else:
                self.migration.loger.info('Created the Category %s '
                                          '' % (category[1]))
        return True

    def import_product(self):
        '''
        Import the Product by import_data method way
        '''
        model = 'product.product'
        fields = ['id', 'name', 'type', 'default_code', 'list_price',
                  'standard_price', 'active', 'warranty', 'description_sale',
                  'categ_id/id', '.id']
        product_ids = self.migration.origin.search(model, [], limit=1)
        no_create = {}
        for product in self.migration.origin.execute('product.product',
                                                     'export_data',
                                                     product_ids,
                                                     fields)['datas']:
            if not product[0]:
                new_id = '__export__.{productl},{ids}'.format(productl=model.replace('.', '_'), ids=product[-1])
                product.pop(0)
                product.insert(0, new_id)
            product.pop(-1)
            result = self.migration.dest.execute(model, 'import_data',
                                                 fields, [product])
            if product[0] in no_create.keys():
                self.migration.dest.execute(model, 'import_data',
                                            fields, no_create.get(product[0]))
                self.migration.loger.info('Created the child of %s'
                                          '' % product[1])
            if result[2]:
                self.migration.loger.error('Error creating the product %s '
                                           'because %s' % (product[1],
                                                           result[2]))
                if 'external id' in result[2]:
                    id_xml = result[2].split("'")
                    id_xml = id_xml and id_xml[1]
                    if id_xml in no_create:
                        no_create[id_xml].append(product)
                    else:
                        no_create.update({id_xml: [product]})
            else:
                self.migration.loger.info('Created the product type %s '
                                          '' % (product[1]))
        return True

    def main(self):
        '''
        Call methods to create categories and products
        '''
        self.import_category()
        self.import_product()

class ImportListPriceV6(object):
    '''
    Import List Price from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_price_list(self):
        '''
        Import the price_list by import_data method way
        '''
        model = 'product.pricelist'
        fields = ['id', 'name', 'type', '.id']
        pricelist_ids = self.migration.origin.search(model, [])
        for pricelist in self.migration.origin.execute(model,
                                                       'export_data',
                                                       pricelist_ids, fields
                                                      )['datas']:
            if not pricelist[0]:
                new_id = '__export__.{pricelistl},{ids}'.format(pricelistl=model.replace('.', '_'), ids=pricelist[-1])
                pricelist.pop(0)
                pricelist.insert(0, new_id)
            pricelist.pop(-1)
            result = self.migration.dest.execute(model,
                                                 'import_data',
                                                 fields,
                                                 [pricelist])
            if result[2]:
                self.migration.loger.error('Error creating the PriceList %s '
                                           'because %s' % (pricelist[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the PriceList %s '
                                          '' % (pricelist[1]))
        return True

    def import_price_list_version(self):
        '''
        Import the price_list_version by import_data method way
        '''
        model = 'product.pricelist.version'
        fields = ['id', 'name', 'pricelist_id/id', 'date_start', 'date_end', '.id']
        pricelist_ids = self.migration.origin.search(model, [])
        for pricelist in self.migration.origin.execute(model, 'export_data',
                                                       pricelist_ids, fields
                                                      )['datas']:
            if not pricelist[0]:
                new_id = '__export__.{pricelistl},{ids}'.format(pricelistl=model.replace('.', '_'), ids=pricelist[-1])
                pricelist.pop(0)
                pricelist.insert(0, new_id)
            pricelist.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [pricelist])
            if result[2]:
                self.migration.loger.error('Error creating the Version %s '
                                           'because %s' % (pricelist[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the Price List Version %s '
                                          '' % (pricelist[1]))
        return True

    def import_price_list_items(self):
        '''
        Import the price_list_items by import_data method way
        '''
        model = 'product.pricelist.item'
        fields = ['id', 'name', 'price_version_id/id', 'base_pricelist_id/id',
                  'min_quantity', 'base', 'price_discount', 'product_id/id',
                  'price_max_margin', 'price_min_margin', 'price_round',
                  'sequence', 'categ_id/id', '.id']
        pricelist_ids = self.migration.origin.search(model, [])
        for pricelist in self.migration.origin.execute(model, 'export_data',
                                                       pricelist_ids, fields
                                                      )['datas']:
            if not pricelist[0]:
                new_id = '__export__.{pricelistl},{ids}'.format(pricelistl=model.replace('.', '_'), ids=pricelist[-1])
                pricelist.pop(0)
                pricelist.insert(0, new_id)
            pricelist.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [pricelist])
            if result[2]:
                self.migration.loger.error('Error creating the Item %s '
                                           'because %s' % (pricelist[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the Items %s '
                                          '' % (pricelist[1]))
        return True

    def main(self):
        '''
        Create Journals and all record related with the journals
        '''
        self.import_price_list()
        self.import_price_list_version()
        self.import_price_list_items()

class ImportFiscalYearsPeriods(object):
    '''
    Import list from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_journal_period(self):
        '''
        Import Fiscal Year
        '''
        model = 'account.journal.period'
        fields = ['id', 'name', 'active', 'journal_id/id', 'period_id/id', '.id']
        account_ids = self.migration.origin.search(model, [])
        for account in self.migration.origin.execute(model, 'export_data',
                                                     account_ids,
                                                     fields)['datas']:
            if not account[0]:
                new_id = '__export__.{accountl},{ids}'.format(accountl=model.replace('.', '_'), ids=account[-1])
                account.pop(0)
                account.insert(0, new_id)
            account.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [account])
            if result[2]:
                self.migration.loger.error('Error creating the Journal P %s '
                                           'because %s' % (account[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the Journal P %s '
                                          '' % (account[1]))
        return True

    def import_fiscal_years(self):
        '''
        Import Fiscal Year
        '''
        model = 'account.fiscalyear'
        fields = ['id', 'name', 'code', 'date_start', 'date_stop', '.id']
        account_ids = self.migration.origin.search(model, [])
        for account in self.migration.origin.execute(model, 'export_data',
                                                     account_ids,
                                                     fields)['datas']:
            if not account[0]:
                new_id = '__export__.{accountl},{ids}'.format(accountl=model.replace('.', '_'), ids=account[-1])
                account.pop(0)
                account.insert(0, new_id)
            account.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [account])
            if result[2]:
                self.migration.loger.error('Error creating the year %s '
                                           'because %s' % (account[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the Year %s '
                                          '' % (account[1]))
        return True

    def import_period(self):
        '''
        Import Fiscal Year
        '''
        model = 'account.period'
        fields = ['id', 'name', 'code', 'date_start', 'date_stop',
                  'special', 'fiscalyear_id/id', '.id']
        period_ids = self.migration.origin.search(model, [])
        for period in self.migration.origin.execute(model, 'export_data',
                                                    period_ids,
                                                    fields)['datas']:
            if not period[0]:
                new_id = '__export__.{periodl},{ids}'.format(periodl=model.replace('.', '_'), ids=period[-1])
                period.pop(0)
                period.insert(0, new_id)
            period.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [period])
            if result[2]:
                self.migration.loger.error('Error creating the Period %s '
                                           'because %s' % (period[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the Period %s '
                                          '' % (period[1]))
        return True

    def main(self):
        '''
        Create the fiscal years and periods
        '''
        self.import_fiscal_years()
        self.import_period()
        self.import_journal_period()
        return True


class ImportPaymentTerm(object):
    '''
    Import Payment Terms
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_payment_terms(self):
        '''
        Import Payment Terms
        '''
        model = 'account.payment.term'
        fields = ['id', 'name', 'note', '.id']
        account_ids = self.migration.origin.search(model, [])
        for account in self.migration.origin.execute(model, 'export_data',
                                                     account_ids,
                                                     fields)['datas']:
            if not account[0]:
                new_id = '__export__.{accountl},{ids}'.format(accountl=model.replace('.', '_'), ids=account[-1])
                account.pop(0)
                account.insert(0, new_id)
            account.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [account])
            if result[2]:
                self.migration.loger.error('Error creating the Term %s '
                                           'because %s' % (account[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the Term %s '
                                          '' % (account[1]))
        return True

    def import_payment_term_line(self):
        '''
        Import Payment Terms Line
        '''
        model = 'account.payment.term.line'
        fields = ['id', 'days', 'days2', 'payment_id/id', 'value_amount',
                  'value', '.id']
        account_ids = self.migration.origin.search(model, [])
        for account in self.migration.origin.execute(model, 'export_data',
                                                     account_ids,
                                                     fields)['datas']:
            if not account[0]:
                new_id = '__export__.{accountl},{ids}'.format(accountl=model.replace('.', '_'), ids=account[-1])
                account.pop(0)
                account.insert(0, new_id)
            account.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [account])
            if result[2]:
                self.migration.loger.error('Error creating the Term Line %s '
                                           'because %s' % (account[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the Term Line%s '
                                          '' % (account[1]))
        return True


    def main(self):
        '''
        Create the payments tems
        '''
        self.import_payment_terms()
        self.import_payment_term_line()
        return True


def importusers(migration):
    '''
    Import Users from verion 6 of odoo
    '''

    model = 'res.users'
    fields = ['id', 'name', 'login', 'password', '.id']

    for users in migration.origin.search(model, []):

        users_list = migration.origin.execute(model, 'export_data',
                                              [users],
                                              fields)['datas']
        for ulist in users_list:
            if not ulist[0]:
                new_id = '__export__.{ulistl},{ids}'.format(ulistl=model.replace('.', '_'), ids=ulist[-1])
                ulist.pop(0)
                ulist.insert(0, new_id)
            ulist.pop(-1)

        result = migration.dest.execute(model, 'import_data', fields or
                                        fields, users_list)
        if result[2]:
            migration.loger.error('Error creating the user %s '
                                  'because %s' % (users_list[0][1], result[2]))
        else:
            migration.loger.info('Created the user  %s '
                                 '' % (users_list[0][1]))
    return True

def importpartnersv6(migration):
    '''
    Import Partners from verion 6 of odoo
    '''

    model = 'res.partner'
    model2 = 'res.partner.address'
    fields_p = ['id', 'name', 'credit', 'vat',
                'credit_limit', 'debit', 'debit_limit', 'email', 'mobile',
                'phone', 'property_account_payable/id',
                'property_account_receivable/id',
                'property_payment_term/id',
                'property_product_pricelist/id',
                'property_product_pricelist_purchase/id', 'customer',
                'supplier', '.id']
    fields_a = ['city', 'type', 'street', 'street2', 'fax',
                'zip', 'country_id']
    fields_c = ['id', 'name', 'fax', 'mobile', 'street', 'street2',
                'country_id', 'type', 'partner_id/id']
    fields_c8 = ['id', 'name', 'fax', 'mobile', 'street', 'street2',
                 'country_id', 'type', 'parent_id/id']

    for partner in migration.origin.search(model, []):

        partner_list = migration.origin.execute(model, 'export_data',
                                                [partner],
                                                fields_p)['datas']
        contact = migration.origin.search(model2,
                                          [('partner_id', '=', partner),
                                           ('type', '=', 'invoice')],
                                          limit=1)
        partner_list = partner_list[0]
        fields = False
        if contact:
            partner_list += migration.origin.execute(model2, 'export_data',
                                                     contact,
                                                     fields_a)['datas'][0]
            fields = fields_p+fields_a
        else:
            contact = migration.origin.search(model2,
                                              [('partner_id', '=', partner)],
                                              limit=1)
            if contact:
                partner_list += migration.origin.execute(model2, 'export_data',
                                                         contact,
                                                         fields_a)['datas'][0]
                fields = fields_p+fields_a


        if not partner_list[0]:
            new_id = '__export__.{partner_listl},{ids}'.format(partner_listl=model.replace('.', '_'), ids=partner_list[-1])
            partner_list.pop(0)
            partner_list.insert(0, new_id)
        partner_list.pop(-1)
        result = migration.dest.execute(model, 'import_data', fields or \
                                        fields_p, [partner_list])
        if result[2]:
            migration.loger.error('Error creating the type %s '
                                  'because %s' % (partner_list[1], result[2]))
        else:
            migration.loger.info('Created the partner  %s '
                                 '' % (partner_list[1]))
        contact = contact and migration.origin. search(model2, [('partner_id',
                                                                 '=', partner),
                                                                ('id', '!=',
                                                                 contact[0])])
        for con in contact and migration.origin.execute(model2, 'export_data',
                                                        contact,
                                                        fields_c)['datas']:
            if con[1] == False:
                con.pop(1)
                con.insert(1, partner_list[1])
            result = migration.dest.execute(model, 'import_data', fields_c8,
                                            [con])
            if result[2]:
                migration.loger.error('Error creating the Contac %s '
                                      'because %s' % (con[1], result[2]))
            else:
                migration.loger.info('Created the Contact  %s '
                                     '' % (con[1]))
    return True

class ImportAccountsV6(object):
    '''
    Import list from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_account_type(self):
        '''
        Import the account type by import_data method way
        '''
        model = 'account.account.type'
        fields = ['id', 'name', 'code', 'report_type', 'close_method', '.id']
        account_ids = self.migration.origin.search(model, [])
        r_type = {'Balance Sheet (Assets Accounts)': 'asset',
                  'Profit & Loss (Expense Accounts)': 'expense',
                  'Profit & Loss (Income Accounts)': 'income'}
        for account in self.migration.origin.execute(model, 'export_data',
                                                     account_ids,
                                                     fields)['datas']:
            if account[3] in r_type:
                account.insert(3, r_type.get(account[3]))
                account.pop(4)
            if not account[0]:
                new_id = '__export__.{accountl},{ids}'.format(accountl=model.replace('.', '_'), ids=account[-1])
                account.pop(0)
                account.insert(0, new_id)
            account.pop(-1)
            result = self.migration.dest.execute(model, 'import_data', fields,
                                                 [account])
            if result[2]:
                self.migration.loger.error('Error creating the type %s '
                                           'because %s' % (account[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the account type %s '
                                          '' % (account[1]))
        return True

    def main(self):
        '''
        Search the records to create in the new instance
        '''
        company_ids = self.migration.origin.search('res.company', [])
        company_id = company_ids and company_ids[0]
        company_dest = self.migration.dest.search('res.company',
                                                  [])
        model = 'account.account'
        fields = ['id', 'name', 'code', 'parent_id/id', 'user_type/id', '.id']
        if company_id and company_dest:
            self.import_account_type()
            company_dest = self.migration.dest.browse('res.company',
                                                      company_dest[0])
            account_ids = self.migration.origin.search(model, [])
            no_create = {}
            for account in self.migration.origin.execute(model,
                                                         'export_data',
                                                         account_ids,
                                                         fields)['datas']:

                if not account[0]:
                    new_id = '__export__.{accountl},{ids}'.format(accountl=model.replace('.', '_'), ids=account[-1])
                    account.pop(0)
                    account.insert(0, new_id)
                account.pop(-1)
                result = self.migration.dest.execute(model, 'import_data',
                                                     fields, [account])
                if account[0] in no_create.keys():
                    self.migration.dest.execute(model, 'import_data', fields,
                                                no_create.get(account[0]))
                    self.migration.loger.info('Created the child of %s'
                                              '' % account[1])
                if result[2]:
                    self.migration.loger.error('Error creating the account %s '
                                               'because %s' % (account[1],
                                                               result[2]))
                    if 'external id' in result[2]:
                        id_xml = result[2].split("'")
                        id_xml = id_xml and id_xml[1]
                        if id_xml in no_create:
                            no_create[id_xml].append(account)
                        no_create.update({id_xml: [account]})
                else:
                    self.migration.loger.info('Created the account %s '
                                              '' % (account[1]))



class MigrationTools(object):
    '''
    Conections object to get records to migrate
    '''

    def __init__(self):
        '''
        Objects of origin and destiny
        '''
        self.origin = False
        self.dest = False
        self.loger = False

    @staticmethod
    def get_id(xml_id):
        '''
        Extract the id from xml_id
        @param xml_id: String with the xml_id of a record
        '''
        id_record = re.findall(r'\d+', xml_id)
        if id_record:
            return int(id_record[0])
        return 0

    def main(self, configuration):
        '''
        Get variables of the configuration object
        '''
        hostname = configuration.get_hostname()
        dbname = configuration.get_db()
        port = configuration.get_port()
        user = configuration.get_user()
        pwd = configuration.get_pwd()
        shost = configuration.get_shostname()
        sdb = configuration.get_sdb()
        sport = configuration.get_sport()
        suser = configuration.get_suser()
        spwd = configuration.get_spwd()
        origin = Instance(dbname=dbname, hostname=hostname, port=int(port),
                          passwd=pwd, username=user,
                          logger=configuration.logger)
        self.origin = origin.server_login()
        dest = Instance(dbname=sdb, hostname=shost, port=int(sport),
                        passwd=spwd, username=suser,
                        logger=configuration.logger)
        self.dest = dest.server_login()
        self.loger = configuration.logger
        return True


if __name__ == '__main__':

    CONFIGURATION = VauxooToolsServers(app_name='migrate_instances',
                                       usage_message="Created by VauxooTools",
                                       options=['dbname', 'hostname',
                                                'password', 'port', 'sd',
                                                'sh', 'spo', 'sp', 'su',
                                                'username'],
                                       log=True, vx_instance=VxConfigServers)

    CI = MigrationTools()
    CI.main(CONFIGURATION)
    OBJ = ImportCurrency(CI)
    OBJ.main()
    OBJ = ImportAccountsV6(CI)
    OBJ.main()
    OBJ = ImportJournalsV6(CI)
    OBJ.main()
    OBJ = ImportFiscalYearsPeriods(CI)
    OBJ.main()
    OBJ = ImportProductV6(CI)
    OBJ.main()
    OBJ = ImportListPriceV6(CI)
    OBJ.main()
    importpartnersv6(CI)
    importusers(CI)
    OBJ = ImportPaymentTerm(CI)
    OBJ.main()
